{
☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢
Ales's & Postmortem's scripts
❤ Zničení budov po prohře.
❤ Odkrytí mapy po výhře.
☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢
}

// ZNIČENÍ BUDOV PO PROHŘE
// Specifikace procedur a proměnných.
procedure ArrayLoop(allhouses: Array of Integer);
var
	i: Integer;

// Zničí všechny budovy.
begin
	for i := 0 to Length(allhouses) - 1 do
	begin
		Actions.HouseDestroy(allhouses[i], False);
	end;
end;

// Pokud hráč prohraje, tak vytvoří výpis všech budov, které mají být zničeny.
procedure OnPlayerDefeated(aPlayer: Integer);
begin
	ArrayLoop(States.PlayerGetAllHouses(aPlayer));
end;

// ODKRYTÍ MAPY PO VÝHŘE
procedure OnPlayerVictory (aPlayer: Integer);
begin
	Actions.FogRevealAll(aPlayer);
end;

{
☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢
Toxic's scripts
❤ Automatická tvorba jednotek ve škole
❤ Posílání surovin přes tržiště.
❤ Informace o stavu armády a zabití.
☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢
}

// DECLARATION:
type aBuildings = record
	Schools: array of Integer;
	Markets: array of Integer;
end;
type aPLAYER = record
	Buildings: aBuildings;
	TowersCount: Byte;
end;
var PLAYER: array of aPLAYER;
{const TOWERSLIMIT = 20;}{zrušený limit na věže}

// SCHOOLHOUSE
procedure Recruits(var aPlayer: Integer);
var i: Integer;
begin			
	for i := 0 to Length(PLAYER[aPlayer].Buildings.Schools)-1 do
		if States.HouseRepair(PLAYER[aPlayer].Buildings.Schools[i]) and (States.HouseResourceAmount(PLAYER[aPlayer].Buildings.Schools[i], 7) > 0) and (States.HouseSchoolQueue(PLAYER[aPlayer].Buildings.Schools[i], 0) = - 1) then
			Actions.HouseSchoolQueueAdd(PLAYER[aPlayer].Buildings.Schools[i], 13, 1);
end;

procedure AddHouse(aHouse: Integer; var Houses: array of Integer);
begin
	SetLength(Houses, Length(Houses)+1);
	Houses[High(Houses)] := aHouse;
end;

procedure RemoveHouse(aHouse: Integer; var Houses: array of Integer);
var i: Integer;
begin
	for i := 0 to Length(Houses)-1 do if (Houses[i] = aHouse) then break;
	Houses[i] := Houses[High(Houses)];
	SetLength(Houses, Length(Houses)-1);
end;

// CARAVAN
procedure Transaction(ID, recipient, aFrom, aTo, countAdd, countRemove: Integer);
begin
	Actions.GiveWares(recipient,aFrom,countAdd);
	Actions.HouseTakeWaresFrom(ID,aTo,countRemove);
end;

procedure Caravan(ID, aFrom, aTo: Integer);
var recipient, aPlayer: Integer;
TradeRatio: Double;
begin
	aPlayer := States.HouseOwner(ID);
	if aFrom < aTo then recipient := aTo-1
	else recipient := aTo;
	if (recipient < 8) AND (States.PlayerAllianceCheck(aPlayer, recipient)) then begin
		TradeRatio := ((States.MarketValue(aFrom))/(States.MarketValue(aTo)*States.MarketLossFactor));
		if TradeRatio < 1 then Transaction(ID, recipient, aFrom, aTo, Round(1/TradeRatio), 1)
		else Transaction(ID, recipient, aFrom, aTo, 1, Round(TradeRatio));
	end else begin
		//Actions.HouseRepairEnable(ID,False);
		Actions.MarketSetTrade(ID, aFrom, aTo, 0);
		Actions.PlayWAV(aPlayer, 'wCant', 1);
	end;
end;


// STATISTIC
procedure updateOverlay();
var i, j, aPlayer, teamPlayer, sumKill, recipient, aFrom, aTo, count, line: Integer;
aString: String;
PL: array of Boolean;
tradeRatio: Double;
begin
	SetLength(PL,States.LocationCount);
	Actions.OverlayTextSet(-1, '');
	for aPlayer := 0 to Length(PL)-1 do begin
		if PL[aPlayer] OR not States.PlayerEnabled(aPlayer) then continue;
		for teamPlayer := 0 to Length(PL)-1 do if States.PlayerEnabled(teamPlayer) and States.PlayerAllianceCheck(teamPlayer, aPlayer) then begin
			PL[teamPlayer] := True;
			sumKill := 0;
			for i := 14 to 26 do sumKill := sumKill + States.StatUnitKilledCount(teamPlayer,i);
			for j := 0 to Length(PL)-1 do if States.PlayerEnabled(j) and States.PlayerAllianceCheck(j, aPlayer) then
				Actions.OverlayTextAppendFormatted(j, aString+'|[$%s]%s[] -> kills: [$B9B9FF]%d[]; units: [$BBFFB9]%d[]', [States.PlayerColorText(teamPlayer), States.PlayerName(teamPlayer), sumKill, States.StatArmyCount(teamPlayer)]);
			for i := 0 to Length(PLAYER[teamPlayer].Buildings.Markets)-1 do if States.HouseRepair(PLAYER[teamPlayer].Buildings.Markets[i]) then begin
				count := States.MarketOrderAmount(PLAYER[teamPlayer].Buildings.Markets[i]);
				if count > 0 then begin
					aFrom := States.MarketFromWare(PLAYER[teamPlayer].Buildings.Markets[i]);
					aTo := States.MarketToWare(PLAYER[teamPlayer].Buildings.Markets[i]);
					tradeRatio := States.MarketValue(aTo)*States.MarketLossFactor/States.MarketValue(aFrom);
					if tradeRatio >= 1.5 then count := count*Round(States.MarketValue(aTo)*States.MarketLossFactor/States.MarketValue(aFrom));
					if aFrom < aTo then recipient := aTo-1
					else recipient := aTo;
					line := line+1;
					if (recipient < 8) AND (States.PlayerEnabled(recipient)) AND (States.PlayerAllianceCheck(aPlayer, recipient)) then begin
						for j := 0 to Length(PL)-1 do if States.PlayerEnabled(j) and States.PlayerAllianceCheck(j, aPlayer) then begin
							if (line = 1) then Actions.OverlayTextAppend(j,'|   ');
							Actions.OverlayTextAppendFormatted(j, ' [$FFDFD1]%d[]x %s -> [$%s]%s[];', [count,States.WareTypeName(aFrom),States.PlayerColorText(recipient),States.PlayerName(recipient)])
						end;
					end else begin
						//Actions.HouseRepairEnable(PLAYER[teamPlayer].Buildings.Markets[i],False);
						Actions.MarketSetTrade(PLAYER[teamPlayer].Buildings.Markets[i], aFrom, aTo, 0);
						Actions.PlayWAV(teamPlayer, 'wCant', 1);
					end;
				end;
			end;
			line := 0;
		end;
	end;
end;

// EVENTS
procedure OnHouseBuilt(aHouse: Integer);
begin
	if not States.PlayerIsAI(States.HouseOwner(aHouse)) then begin
		if States.HouseType(aHouse) = 13 then AddHouse(aHouse, PLAYER[States.HouseOwner(aHouse)].Buildings.Schools)
		else if States.HouseType(aHouse) = 29 then AddHouse(aHouse, PLAYER[States.HouseOwner(aHouse)].Buildings.Markets);
	end;
end;

procedure OnHouseDestroyed(aHouse, aDestroyerIndex: Integer);
begin
	if (States.HouseIsComplete(aHouse)) AND not States.PlayerIsAI(States.HouseOwner(aHouse)) then begin
		if States.HouseType(aHouse) = 13 then RemoveHouse(aHouse, PLAYER[States.HouseOwner(aHouse)].Buildings.Schools)
		else if States.HouseType(aHouse) = 29 then RemoveHouse(aHouse, PLAYER[States.HouseOwner(aHouse)].Buildings.Markets);
	end;
end;

procedure OnMarketTrade(aMarket: Integer; aFrom: Integer; TWareType: Integer);
begin
	if States.HouseRepair(aMarket) then Caravan(aMarket, aFrom, TWareType);
end;

procedure OnMissionStart;
var aPlayer, i: Integer;
aiHouses: array of Integer;
text: String;
begin
	SetLength(PLAYER, States.LocationCount);
	for aPlayer := 0 to States.LocationCount-1 do if States.PlayerEnabled(aPlayer) then begin
		aiHouses := States.PlayerGetAllHouses(aPlayer);
		for i := 0 to Length(aiHouses)-1 do begin
			if (States.HouseType(aiHouses[i]) = 13) and States.HouseIsComplete(aiHouses[i]) then AddHouse(aiHouses[i], PLAYER[aPlayer].Buildings.Schools)
			else if (States.HouseType(aiHouses[i]) = 29) and States.HouseIsComplete(aiHouses[i]) then AddHouse(aiHouses[i], PLAYER[aPlayer].Buildings.Markets)
		end;
		text := text + '[$'+ States.PlayerColorText(aPlayer)+']'+States.PlayerName(aPlayer)+'[] = [$B9B9FF]'+States.WareTypeName(aPlayer)+'[] ([$E9E9FF]'+States.WareTypeName(aPlayer+1)+'[])|';
	end;
	Actions.ShowMSG(-1, text);
end;


procedure OnTick;
var aPlayer: Integer;
begin
	if (States.GameTime mod 20) = 0 then updateOverlay(); // Statistics
	aPlayer := States.GameTime mod States.LocationCount;
	if States.PlayerEnabled(aPlayer) then
		if not States.PlayerIsAI(aPlayer) then Recruits(aPlayer); // Schoolhouse
end;

{
☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢
TVORBA DALŠÍCH JEDNOTEK
❤ Warrior = 2 meče + železné brnění
❤ Rebel = 1 kopí
❤ Rouge = 1 luk
☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢☢
}

Const
WS= 100; // wares 16- woodenshield
LJ= 100; // wares 18- leather jacket
AX= 100; // wares 20- axe
MAP_TYPE = 0;
BUILD_ORDER = 1;
STATS_FOR_ALL = 0;
INTERFACE_COLOR = 'aaaaaa';
IRON_COLOR = 'ffffb3';
LEATHER_COLOR = '3377ff';
HORSE_COLOR = '003366';
STAT_COLOR = 'ff6600';

var BarracksList, Equipped, Lost, Defeated, DefeatedPoints: array [0..7] of Integer;
var BuildOrderH: Integer;

// Nastane, pokud je vytvořen bojovník.
procedure OnWarriorEquipped (aUnitID: Integer ; aGroupID: Integer);

var aBarracks: Integer;

begin
//Warrior = 2 meče + železné brnění
if States.UnitType(aUnitID) = 14 then begin // Z které jednotky se vytvoří nová jednotka, 14 = domobrana.
		aBarracks := States.ClosestHouse(States.UnitOwner(aUnitID), States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID), 21);
		if States.HouseRepair(aBarracks) = true then begin	
			if aBarracks > -1 then begin
					if (States.HouseResourceAmount(aBarracks, 19) >= 1) and (States.HouseResourceAmount(aBarracks, 21) >= 2) then begin
					Actions.GroupOrderLink(Actions.GiveGroup(States.UnitOwner(aUnitID), 26, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID), States.UnitDirection(aUnitID),1,1), aGroupID); /// Která jednotka se vytvořá, 26 = warrior.
					Actions.UnitKill(aUnitID, True); // Odstranění původní jednotky v tichosti.
					Actions.HouseAddWaresTo(aBarracks, 20, 1);
					Actions.HouseTakeWaresFrom(aBarracks, 21, 2);
					Actions.HouseTakeWaresFrom(aBarracks, 19, 1);
					end;
			end;
		end;	
	end;

//Rebel = 1 kopí
	if States.UnitType(aUnitID) = 19 then begin
		aBarracks := States.ClosestHouse(States.UnitOwner(aUnitID), States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID), 21);
		if States.HouseRepair(aBarracks) = true then begin	
			if aBarracks > -1 then begin
					if (States.HouseResourceAmount(aBarracks, 18) >= 0) then begin
					Actions.GroupOrderLink(Actions.GiveGroup(States.UnitOwner(aUnitID), 24, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID), States.UnitDirection(aUnitID),1,1), aGroupID);
					Actions.HouseAddWaresTo(aBarracks, 18, 1);
				end;
				Actions.UnitKill(aUnitID, True);
			end;
		end;	
	end;
	
//Rouge = 1 luk
if States.UnitType(aUnitID) = 17 then begin // Z které jednotky se vyrobí.
		aBarracks := States.ClosestHouse(States.UnitOwner(aUnitID), States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID), 21);
		if States.HouseRepair(aBarracks) = true then begin	
			if aBarracks > -1 then begin
					if (States.HouseResourceAmount(aBarracks, 18) >= 0) then begin
					Actions.GroupOrderLink(Actions.GiveGroup(States.UnitOwner(aUnitID), 25, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID), States.UnitDirection(aUnitID),1,1), aGroupID); // Která jednotka se vytvoří.
					Actions.HouseAddWaresTo(aBarracks, 18, 1); // Co se vrátí do hradu, aby vznikla výsledná cena za jednotku.
					end;
				Actions.UnitKill(aUnitID, True); // Tiché zničení původní jednotky.
			end;
		end;	
	end;


//The follow units only for the trained unit counter, except the scout;
//SWordman
if States.UnitType(aUnitID) = 16 then begin
Inc(Equipped[States.UnitOwner(aUnitID)]);
end;

//Pike
if States.UnitType(aUnitID) = 20 then begin
Inc(Equipped[States.UnitOwner(aUnitID)]);
end;

//Xbow
if States.UnitType(aUnitID) = 18 then begin
Inc(Equipped[States.UnitOwner(aUnitID)]);
end;

//Knight
if States.UnitType(aUnitID) = 22 then begin
Inc(Equipped[States.UnitOwner(aUnitID)]);
end;
	
//Scout21
if States.UnitType(aUnitID) = 21 then begin
		Inc(Equipped[States.UnitOwner(aUnitID)]);
		
		aBarracks := States.ClosestHouse(States.UnitOwner(aUnitID), States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID), 21);
		if(States.HouseRepair(aBarracks) = false) then begin
			if aBarracks > -1 then begin
				if ((States.HouseResourceAmount(aBarracks, 18) < LJ) or (States.HouseResourceAmount(aBarracks, 16) < WS) or (States.HouseResourceAmount(aBarracks, 20) < AX))  then begin
				end;
			end;
		end else begin
		if States.HouseRepair(aBarracks) = true then begin	
			if aBarracks > -1 then begin
					if (States.HouseResourceAmount(aBarracks, 20) >= (AX)) and (States.HouseResourceAmount(aBarracks, 18) >= 0) and (States.HouseResourceAmount(aBarracks, 16) >= 0) then begin
					Actions.GroupOrderLink(Actions.GiveGroup(States.UnitOwner(aUnitID), 27, States.UnitPositionX(aUnitID), States.UnitPositionY(aUnitID), States.UnitDirection(aUnitID),1,1), aGroupID);
					Actions.HouseAddWaresTo(aBarracks, 18, 1);
					Actions.HouseAddWaresTo(aBarracks, 16, 1);
					Actions.UnitKill(aUnitID, True);
					end else begin
					if (States.HouseResourceAmount(aBarracks, 20) < (AX)) and (States.HouseResourceAmount(aBarracks, 18) >= 0) and (States.HouseResourceAmount(aBarracks, 16) >= 0) then begin
										end;
					end;
			end;
		end;
end;

end;
end;


//most of these need because the units have to be trainable in groups. The value of the wares is now 5. This value has to match at the OnWariorEquipe sector. Blockinck trades od LJ,WS,AX
{Procedure OnHouseBuilt(aHouseID: Integer);
Begin
	//if (BuildOrderH = 1) then      //its school opens the quarry and inn together, quarry opens the Wcutter.
			if States.HouseType(aHouseID) = 13 then //unlock inn after school
				Actions.HouseAllow(States.HouseOwner(aHouseID), 27, True);
			if States.HouseType(aHouseID) = 13 then //!!!unlock quarry-->skip the inn is possible. Original value was 27
				Actions.HouseAllow(States.HouseOwner(aHouseID), 14, True);
			if States.HouseType(aHouseID) = 14 then //unlock cutter
				Actions.HouseAllow(States.HouseOwner(aHouseID), 9, True);
			if States.HouseType(aHouseID) = 21 then begin		
			//add the necesarry wares to the barrack, without these the players wuld have problem with training theTHunits without leather production
				BarracksList[States.HouseOwner(aHouseID)] := aHouseID;  	//Usng the full tags of the variables -
				Actions.HouseAddWaresTo(aHouseID, 16, WS);
				Actions.HouseAddWaresTo(aHouseID, 20, AX);
				Actions.HouseAddWaresTo(aHouseID, 18, LJ);
			end;
end;}